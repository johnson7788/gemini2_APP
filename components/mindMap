import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';

interface Node {
    id: string;
    name: string;
    description?: string;
    children?: Node[];
}

interface Props {
    data: Node;
}

export const MindMap: React.FC<Props> = ({ data }) => {
    const svgRef = useRef<SVGSVGElement>(null);
    const tooltipRef = useRef<HTMLDivElement>(null);
    const [dimensions, setDimensions] = useState({ width: 0, height: 0 });

    useEffect(() => {
        const updateDimensions = () => {
            if (svgRef.current) {
                setDimensions({
                    width: window.innerWidth,
                    height: window.innerHeight,
                });
            }
        };

        window.addEventListener('resize', updateDimensions);
        updateDimensions();

        return () => window.removeEventListener('resize', updateDimensions);
    }, []);

    useEffect(() => {
        if (!svgRef.current || !tooltipRef.current || !dimensions.width) return;

        // Clear previous content
        d3.select(svgRef.current).selectAll('*').remove();

        const margin = { top: 20, right: 90, bottom: 20, left: 90 };
        const width = dimensions.width - margin.left - margin.right;
        const height = dimensions.height - margin.top - margin.bottom;

        const svg = d3.select(svgRef.current)
            .attr('width', width + margin.left + margin.right)
            .attr('height', height + margin.top + margin.bottom);

        const g = svg.append('g')
            .attr('transform', `translate(${margin.left},${margin.top})`);

        const tooltip = d3.select(tooltipRef.current)
            .style('position', 'absolute')
            .style('visibility', 'hidden')
            .style('background-color', 'white')
            .style('padding', '8px')
            .style('border-radius', '4px')
            .style('box-shadow', '0 2px 4px rgba(0,0,0,0.1)');

        // Create hierarchy
        const root = d3.hierarchy(data);

        // Create tree layout
        const treeLayout = d3.tree<Node>()
            .size([height, width]);

        // Initial position
        root.x0 = height / 2;
        root.y0 = 0;

        // Collapse all children initially
        root.descendants().forEach(d => {
            if (d.children) {
                d._children = d.children;
                d.children = null;
            }
        });

        const update = (source: any) => {
            const duration = 750;

            // Compute the new tree layout
            const nodes = treeLayout(root);

            // Normalize for fixed-depth
            nodes.descendants().forEach(d => {
                d.y = d.depth * 180;
            });

            // Update the nodes
            const node = g.selectAll('g.node')
                .data(nodes.descendants(), (d: any) => d.data.id);

            // Enter new nodes
            const nodeEnter = node.enter().append('g')
                .attr('class', 'node')
                .attr('transform', () => `translate(${source.y0},${source.x0})`)
                .on('click', (event, d: any) => {
                    if (d.children) {
                        d._children = d.children;
                        d.children = null;
                    } else {
                        d.children = d._children;
                        d._children = null;
                    }
                    update(d);
                })
                .on('mouseover', (event, d: any) => {
                    if (d.data.description) {
                        tooltip
                            .style('visibility', 'visible')
                            .html(`<div class="p-2">
                <p class="font-bold">${d.data.name}</p>
                <p class="text-sm text-gray-600">${d.data.description}</p>
              </div>`);
                    }
                })
                .on('mousemove', (event) => {
                    tooltip
                        .style('top', (event.pageY - 10) + 'px')
                        .style('left', (event.pageX + 10) + 'px');
                })
                .on('mouseout', () => {
                    tooltip.style('visibility', 'hidden');
                });

            // Add Circle
            nodeEnter.append('circle')
                .attr('r', 8)
                .style('fill', (d: any) => d._children ? '#fd9d3e' : '#01c5c4')
                .style('stroke', '#666')
                .style('stroke-width', 1.5);

            // Add labels
            nodeEnter.append('text')
                .attr('dy', '.35em')
                .attr('x', (d: any) => d.children || d._children ? -13 : 13)
                .attr('text-anchor', (d: any) => d.children || d._children ? 'end' : 'start')
                .text((d: any) => d.data.name)
                .style('fill', '#333')
                .style('font-size', '14px');

            // Update the nodes
            const nodeUpdate = nodeEnter.merge(node as any)
                .transition()
                .duration(duration)
                .attr('transform', (d: any) => `translate(${d.y},${d.x})`);

            nodeUpdate.select('circle')
                .attr('r', 8)
                .style('fill', (d: any) => d._children ? '#fd9d3e' : '#01c5c4');

            // Remove any exiting nodes
            const nodeExit = node.exit().transition()
                .duration(duration)
                .attr('transform', () => `translate(${source.y},${source.x})`)
                .remove();

            nodeExit.select('circle')
                .attr('r', 0);

            nodeExit.select('text')
                .style('fill-opacity', 0);

            // Update the links
            const link = g.selectAll('path.link')
                .data(nodes.links(), (d: any) => d.target.data.id);

            // Enter any new links
            const linkEnter = link.enter().insert('path', 'g')
                .attr('class', 'link')
                .attr('d', () => {
                    const o = { x: source.x0, y: source.y0 };
                    return diagonal(o, o);
                })
                .style('fill', 'none')
                .style('stroke', '#999')
                .style('stroke-width', 1.5);

            // Update existing links
            linkEnter.merge(link as any)
                .transition()
                .duration(duration)
                .attr('d', (d: any) => diagonal(d.source, d.target));

            // Remove any exiting links
            link.exit().transition()
                .duration(duration)
                .attr('d', () => {
                    const o = { x: source.x, y: source.y };
                    return diagonal(o, o);
                })
                .remove();

            // Store the old positions for transition
            nodes.descendants().forEach(d => {
                d.x0 = d.x;
                d.y0 = d.y;
            });
        };

        // Custom diagonal function
        const diagonal = (s: any, d: any) => {
            return `M ${s.y} ${s.x}
              C ${(s.y + d.y) / 2} ${s.x},
                ${(s.y + d.y) / 2} ${d.x},
                ${d.y} ${d.x}`;
        };

        // Add zoom behavior
        const zoom = d3.zoom()
            .scaleExtent([0.3, 3])
            .on('zoom', (event) => {
                g.attr('transform', event.transform);
            });

        svg.call(zoom as any);

        // Initialize display
        update(root);

    }, [data, dimensions]);

    return (
        <div className= "relative w-full h-screen bg-gray-50" >
        <svg ref={ svgRef } className = "w-full h-full" />
            <div ref={ tooltipRef } className = "absolute pointer-events-none" />
                </div>
  );
};